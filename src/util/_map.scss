/// Reformats a map containing keys with a list of values, so that each key is a single value.
@function split-map($map) {
  $new-map: ();
  
  // Split keys with multiple values into individual keys
  @each $key, $item in $map {
    $key-type: type-of($key);
    @if $key-type == 'number' {
      $new-map: map-merge($new-map, ($key: $item));
    }
    @else if $key-type == 'list' {
      @each $k in $key {
        $new-map: map-merge($new-map, ($k: $item));
      }
    }
  }
  
  @return $new-map;
}

/// Reformats a map containing duplicate values. Keys with identical values are merged into one value, where the key is a list of the matching values' keys.
@function combine-maps($maps...) {
  $new-map: ();
  
  // Iterate through each map passed in
  @each $map in $maps {
    $map: split-map($map);
    
    // Iterate through each keyframe in the map
    // $key is the keyframe percentage
    // $value is a map of CSS properties
    @each $key, $value in $map {
      $new-value: ();

      // If the map already has the keyframe %, append the new property
      @if map-has-key($new-map, $key) {
        $new-value: map-merge(map-get($new-map, $key), $value);
      }
      // Otherwise, create a new map with the new property
      @else {
        $new-value: $value;
      }

      // Finally, merge the modified keyframe value into the output map
      $new-map: map-merge($new-map, ($key: $new-value));
    }
  }

  // Make a name for the keyframes
  $map-name: (name: 'custom-#{random(1000)}');
  $new-map: map-merge($new-map, $map-name);
  
  @return $new-map;
}

@function combo($args...) {
  @return combine-maps($args...);
}
