/// Reformats a map containing keys with a list of values, so that each key is a single value.
/// @param {Map} $map - Map to split up.
/// @return {Map} A reformatted map.
/// @access private
@function -mui-split-keyframes($map) {
  $new-map: ();
  
  // Split keys with multiple values into individual keys
  @each $key, $item in $map {
    $key-type: type-of($key);
    @if $key-type == 'number' {
      $new-map: map-merge($new-map, ($key: $item));
    }
    @else if $key-type == 'list' {
      @each $k in $key {
        $new-map: map-merge($new-map, ($k: $item));
      }
    }
  }
  
  @return $new-map;
}

/// Combines two maps of CSS properties into one map. If both maps have a transform property, the values from each will be combined into one property.
/// @param {Map} $one - First map to merge.
/// @param {Map} $two - Second map to merge.
/// @return {Map} A combined map.
/// @access private
@function -mui-merge-properties($one, $two) {
  @if map-has-key($one, transform) and map-has-key($two, transform) {
    $transform: join(map-get($one, transform), map-get($two, transform));
    $one: map-merge($one, (transform: $transform));
    $two: map-remove($two, transform);
  }

  @return map-merge($one, $two);
}

/// Combines a series of keyframe objects into one.
/// @param {Map} $maps... - A series of maps to merge, as individual parameters.
/// @return {Map} A combined keyframe object.
/// @access private
@function -mui-combine-keyframes($maps...) {
  $new-map: ();
  
  // Iterate through each map passed in
  @each $map in $maps {
    $map: -mui-split-keyframes($map);
    
    // Iterate through each keyframe in the map
    // $key is the keyframe percentage
    // $value is a map of CSS properties
    @each $key, $value in $map {
      $new-value: ();

      // If the map already has the keyframe %, append the new property
      @if map-has-key($new-map, $key) {
        $new-value: -mui-merge-properties(map-get($new-map, $key), $value);
      }
      // Otherwise, create a new map with the new property
      @else {
        $new-value: $value;
      }

      // Finally, merge the modified keyframe value into the output map
      $new-map: map-merge($new-map, ($key: $new-value));
    }
  }

  // Make a name for the keyframes
  $map-name: (name: 'custom-#{random(1000)}');
  $new-map: map-merge($new-map, $map-name);
  
  @return $new-map;
}

/// Creates a keyframe animation that combines multiple animations into one.
@function combo($args...) {
  @return -mui-combine-keyframes($args...);
}
