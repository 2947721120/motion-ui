/// Builds a selector for a motion class, using the settings defined in the `$motion-ui-classes` and `$motion-ui-states` maps.
/// @param {String|List} $states - One or more strings that correlate to a state.
/// @param {Boolean} $active - Defines if the selector is for the setup or active class.
/// @return {String} A selector that can be interpolated into your Sass code.
@function build-selector($states, $active: false) {
  $return: '';
  $chain: map-get($motion-ui-classes, chain);
  $prefix: map-get($motion-ui-classes, prefix);
  $suffix: map-get($motion-ui-classes, active);
  
  @each $sel in $states {
    $return: $return + if($chain, '&.', '#{&}-') + $prefix + $sel;

    @if $active {
      $return: $return + if($chain, '.', '#{&}-') + $prefix + $sel + $suffix;
    }

    $return: $return + ', ';
  }
  
  @return str-slice($return, 1, -3);
}

/// Applies basic transition settings to an element.
/// @param {Keyword} $duration - Length (speed) of the transition.
/// @param {Keyword|Function} $timing - Easing of the transition.
/// @param {Number} $delay - Delay in seconds or milliseconds before the transition starts.
@mixin transition-basics(
  $duration: map-get($motion-ui-speeds, default),
  $timing: map-get($motion-ui-easings, default),
  $delay: map-get($motion-ui-delays, default)
) {
  transition-duration: $duration;
  transition-timing-function: $timing;

  @if $delay > 0 {
    transition-delay: $delay;
  }
}

/// Wraps the content in the setup class for a transition.
/// @param {Keyword} $dir - State to setup for transition.
@mixin transition-start($dir) {
  $selector: build-selector(map-get($motion-ui-states, $dir));
    
  @at-root {
    #{$selector} {
      @content;
    }
  }
}

/// Wraps the content in the active class for a transition.
/// @param {Keyword} $dir - State to activate a transition on.
@mixin transition-end($dir) {
  $selector: build-selector(map-get($motion-ui-states, $dir), true);
    
  @at-root {
    #{$selector} {
      @content;
    }
  }
}

/// Adds styles for a stagger animation, which can be used with Angular's `ng-repeat`.
/// @param {Number} $delay-amount - Amount of time in seconds or milliseconds to add between each item's animation.
@mixin stagger($delay-amount) {
  transition-delay: $delay-amount;

  // Prevent accidental CSS inheritance
  transition-duration: 0;
}

/// Removes the unit (e.g. px, em, rem) from a value, returning the number only.
/// @param {Number} $num - Number to strip unit from.
/// @return {Number} The same number, sans unit.
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/// Converts a turn unit to the equivalent unit in degrees. 1turn is equal to 360 degrees. Not all browsers support turn, so this function allows us to use turns while outputting a value that all browsers understand.
/// @param {Number} $value - Turn value to convert.
/// @return {Number} The same value, but in degrees.
@function turn-to-deg($value) {
  @return strip-unit($value) * 360deg;
}
