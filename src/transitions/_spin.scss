/// Creates a spinning transition by rotating the element. The `turn` unit is used to specify how far to rotate. `1turn` is equal to a 360-degree spin.
/// @param {Keyword} $state [in] - State to transition to.
/// @param {Boolean} $direction [cw] - Direction to spin. Should be `cw` (clockwise) or `ccw` (counterclockwise).
/// @param {Number} $amount [0.75turn] - Amount to element the element.
/// @param {Boolean} $fade [false] - Set to `true` to fade the element in or out simultaneously.
/// @param {Keyword} $duration [500ms] - Length (speed) of the transition.
/// @param {Keyword|Function} $timing [linear] - Easing of the transition.
/// @param {Number} $delay [0s] - Delay in seconds or milliseconds before the transition starts.
@mixin spin(
  $state: in,
  $direction: cw,
  $amount: 0.75turn,
  $fade: map-get($motion-ui-settings, spinAndFade),
  $duration: map-get($motion-ui-speeds, default),
  $timing: map-get($motion-ui-easings, default),
  $delay: map-get($motion-ui-delays, default)
) {
  $amount: turn-to-deg($amount);
  $start: 0;
  $end: 0;

  @if $state == in {
    $start: if($direction == ccw, $amount, $amount * -1);
    $end: 0;
  }
  @else {
    $start: 0;
    $end: if($direction == ccw, $amount * -1, $amount);
  }

  @include transition-start($state) {
    @include transition-basics($duration, $timing, $delay);
    transition-property: transform, opacity;
    transform: rotate($start);
    @if $fade { opacity: if($state == in, 0, 1); }
  }
  @include transition-end($state) {
    transform: rotate($end);
    @if $fade { opacity: if($state == in, 1, 0); }
  }
}